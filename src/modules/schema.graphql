type Query {
  getMyProfile: User!
  getAllTrainees(options: getAllOptions): getAllTrainees!
  getOneTrainee(id:ID!): traineeResponse!
  getAllExamination: getExamResponse!
  getAllQuestions(id:ID!): getQuestionResponse!
}

scalar JSON

type MyObject {
  myField: JSON
}

type Query {
  objects: [MyObject]
}

type Mutation {
  createTrainee(user: createUserInput): traineeResponse!
  updateTrainee(id: ID!, dataToUpdate: updateUserInput!): traineeResponse!
  deleteTrainee(id: ID!): traineeResponse!
  loginUser(payload: loginUserPayload!): loginResponse!
  createExamination(subject: String!, description: String, maximumMarks: String): examResponse!
  updateExamination(payload: updateExaminationInput!): examResponse!
  deleteExamination(id: ID!): examResponse!
  createQuestions(payload: questionPayloadInput!): questionResponse!
  updateQuestions(originalId: ID!, dataToUpdate: questionInput): questionResponse!
  deleteQuestions(id: ID!): questionResponse!
  submitQuestions(answersList: JSON!, questionSet: ID!): submitResponse
}

type Subscription {
  traineeAdded: traineeResponse!
  traineeUpdated: traineeResponse!
  traineeDeleted: traineeResponse!
}
